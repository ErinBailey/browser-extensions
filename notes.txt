https://developer.chrome.com/extensions/contentSecurityPolicy
https://developer.chrome.com/extensions/examples/tutorials/getstarted/popup.js
https://developer.chrome.com/extensions/getstarted

https://developer.chrome.com/extensions/tabs#method-query

https://developer.chrome.com/extensions/content_scripts

http://blog.trendmicro.com/trendlabs-security-intelligence/an-in-depth-look-into-malicious-browser-extensions/
https://developer.chrome.com/extensions/tabs#method-query

Good morning! My name is Erin and I want to talk about browser extensions from the standpoint of a developer with a focus on the security aspect. 

- What is an extension? 
  - If you're using chrome or safari, it's called an extension, if you're using firefox it's a plugin, and if you're using internet explorer, you probably actually don't care about security. Which is fine! It's good that you're here 
  (IE addresses bugs on a fixed schedule, despite the fact that they are not discovered every 3rd wednesday of the month. They're also slow to address these bugs, and they don't check for outdated extensions) 
  But whatever you want to call them, they are programs that adds bits of functionality to your browser. you install them instantly without needing to restart your browswer, and they update
    silently when new versions are available. 
    They are implemented with standard web technologies that we're familiar with. HTML, Css, Javascript, etc.

-Components of an extension
  I want to go over a high level overview of the anatomy of an extension, extensions have a compressed directory with a bunch of files. It needs a manifest.json which contains meta data about the extension, lists permissions, and points to the extensions other Components
  The components that it points to are what is going to provide functionality like browser actions or page actions, running scripts,  

-How can they be bad?
  - what info it can grab (all form fills) what control it has (preventing you from reaching out to other sites)
  https://en.wikipedia.org/wiki/Cross-site_scripting
  - Cross-site scripting (XSS) 
    - a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.
    - Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec as of 2007.[1] Bug bounty company HackerOne in 2017 reported that XSS is still a major threat vector.[2] XSS effects vary in range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site's owner.

-Google has security feature checks
  - A sample of what is shown when you create an extension
    <!--
      - JavaScript and HTML must be in separate files: see our Content Security
      - Policy documentation[1] for details and explanation.
      -
      - [1]: https://developer.chrome.com/extensions/contentSecurityPolicy
    -->
- SO How do malicious browsers get into the Chrome store?
  - evasion tactics, bypassing security checks
    -multi-script files that work together. The malware is split up between different files so that each file might not seem like it has malicious tendencies, and it may look clean. But in reality it works with other files to perform malicious attacks
    -using hex to encode strings in the javascript content content (show sample)
    -using HTTPs and a known, good domain to host malicious JavaScript like heroku app. This gives it the appearance of a legitimate extension
    -using fake file extensions

- The ins and outs of browser plugins
  - manifest
  - background.js
    - able to prevent the removal of the malicious plugin by closing the chrome tab to       manage your extensions
    - you can manipulate it to prevent access to anti virus websites
  - removes the security option from HTTP response header. This would typically stop cross-site scripting attacks
  - runs javascript in the background. What kind of control do they have over you? they can screen scrape, read form fill data (username, passwords, etc), can control social media account (follow, like, subscribe, unsubscribe, friend request)


- How can you protect yourself?
  - strongly advise users to avoid clicking links from messages
